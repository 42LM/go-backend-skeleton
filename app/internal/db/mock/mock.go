// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockNoneRepository creates a new instance of MockNoneRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNoneRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNoneRepository {
	mock := &MockNoneRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNoneRepository is an autogenerated mock type for the NoneRepository type
type MockNoneRepository struct {
	mock.Mock
}

type MockNoneRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNoneRepository) EXPECT() *MockNoneRepository_Expecter {
	return &MockNoneRepository_Expecter{mock: &_m.Mock}
}

// Find provides a mock function for the type MockNoneRepository
func (_mock *MockNoneRepository) Find(ctx context.Context) string {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockNoneRepository_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockNoneRepository_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNoneRepository_Expecter) Find(ctx interface{}) *MockNoneRepository_Find_Call {
	return &MockNoneRepository_Find_Call{Call: _e.mock.On("Find", ctx)}
}

func (_c *MockNoneRepository_Find_Call) Run(run func(ctx context.Context)) *MockNoneRepository_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNoneRepository_Find_Call) Return(s string) *MockNoneRepository_Find_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockNoneRepository_Find_Call) RunAndReturn(run func(ctx context.Context) string) *MockNoneRepository_Find_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMsgRepository creates a new instance of MockMsgRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMsgRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMsgRepository {
	mock := &MockMsgRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMsgRepository is an autogenerated mock type for the MsgRepository type
type MockMsgRepository struct {
	mock.Mock
}

type MockMsgRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMsgRepository) EXPECT() *MockMsgRepository_Expecter {
	return &MockMsgRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockMsgRepository
func (_mock *MockMsgRepository) Delete(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMsgRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockMsgRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockMsgRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockMsgRepository_Delete_Call {
	return &MockMsgRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockMsgRepository_Delete_Call) Run(run func(ctx context.Context, id string)) *MockMsgRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMsgRepository_Delete_Call) Return(err error) *MockMsgRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMsgRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockMsgRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function for the type MockMsgRepository
func (_mock *MockMsgRepository) Find(ctx context.Context, id string) string {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockMsgRepository_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockMsgRepository_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockMsgRepository_Expecter) Find(ctx interface{}, id interface{}) *MockMsgRepository_Find_Call {
	return &MockMsgRepository_Find_Call{Call: _e.mock.On("Find", ctx, id)}
}

func (_c *MockMsgRepository_Find_Call) Run(run func(ctx context.Context, id string)) *MockMsgRepository_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMsgRepository_Find_Call) Return(s string) *MockMsgRepository_Find_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockMsgRepository_Find_Call) RunAndReturn(run func(ctx context.Context, id string) string) *MockMsgRepository_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type MockMsgRepository
func (_mock *MockMsgRepository) Put(ctx context.Context, id string, message string) error {
	ret := _mock.Called(ctx, id, message)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, id, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMsgRepository_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockMsgRepository_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - message string
func (_e *MockMsgRepository_Expecter) Put(ctx interface{}, id interface{}, message interface{}) *MockMsgRepository_Put_Call {
	return &MockMsgRepository_Put_Call{Call: _e.mock.On("Put", ctx, id, message)}
}

func (_c *MockMsgRepository_Put_Call) Run(run func(ctx context.Context, id string, message string)) *MockMsgRepository_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMsgRepository_Put_Call) Return(err error) *MockMsgRepository_Put_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMsgRepository_Put_Call) RunAndReturn(run func(ctx context.Context, id string, message string) error) *MockMsgRepository_Put_Call {
	_c.Call.Return(run)
	return _c
}
